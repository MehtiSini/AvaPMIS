using System;

namespace System
{
    /// <summary>
    /// Represents an Id generator for Guids using the COMB algorithm.
    /// </summary>
    public static class GuidExtensions
    {
        /// <summary>
        /// Create a new CombGuid from a given Guid and timestamp.
        /// </summary>
        /// <param name="guid">The base Guid.</param>
        /// <returns>A new CombGuid created by combining the base Guid with the timestamp.</returns>
        public static string ToCombGuidStr(this Guid guid)
        {
            var generated= ToCombGuid(guid, DateTime.Now);
            return guid.ToString();
        }
        /// <summary>
        /// Create a new CombGuid from a given Guid and timestamp.
        /// </summary>
        /// <param name="guid">The base Guid.</param>
        /// <returns>A new CombGuid created by combining the base Guid with the timestamp.</returns>
        public static Guid ToCombGuid(this Guid guid)
        {
            return ToCombGuid(guid, DateTime.Now);
        }

        /// <summary>
        /// Create a new CombGuid from a given Guid and timestamp.
        /// </summary>
        /// <param name="guid">The base Guid.</param>
        /// <param name="timestamp">The timestamp.</param>
        /// <returns>A new CombGuid created by combining the base Guid with the timestamp.</returns>
        public static Guid ToCombGuid(this Guid guid, DateTime timestamp)
        {
            // note: Guids generated by CombGuidGenerator are only considered ascending by SQL Server which compares Guids in an unusual way
            // to generate Guids considered ascending by MongoDB use the AscendingGuidGenerator

            var baseDate = new DateTime(1900, 1, 1, 0, 0, 0, DateTimeKind.Utc);
            var days = (ushort)(timestamp - baseDate).Days;
            var timeTicks =
                (int)(timestamp.TimeOfDay.Ticks * 300 /
                      TimeSpan.TicksPerSecond); // convert from .NET resolution to SQL Server resolution

            // replace last 6 bytes of a new Guid with 2 bytes from days and 4 bytes from time of day
            // see: The Cost of GUIDs as Primary Keys by Jimmy Nilson
            // at: http://www.informit.com/articles/article.aspx?p=25862&seqNum=7

            var bytes = guid.ToByteArray();

            Array.Copy(BitConverter.GetBytes(days), 0, bytes, 10, 2);
            Array.Copy(BitConverter.GetBytes(timeTicks), 0, bytes, 12, 4);
            if (BitConverter.IsLittleEndian)
            {
                Array.Reverse(bytes, 10, 2);
                Array.Reverse(bytes, 12, 4);
            }

            return new Guid(bytes);
        }
    }
}
